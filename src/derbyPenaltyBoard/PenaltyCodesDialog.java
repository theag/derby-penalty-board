/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package derbyPenaltyBoard;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author nbp184
 */
public class PenaltyCodesDialog extends javax.swing.JDialog {
    
    private javax.swing.JTable tblPenaltyCodes;
    private javax.swing.JScrollPane spPenaltyCodes;
    
    /**
     * Creates new form PenaltyCodesDialog
     */
    public PenaltyCodesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        PenaltyCodesTableModel model = new PenaltyCodesTableModel();
        tblPenaltyCodes = new javax.swing.JTable(model);
        tblPenaltyCodes.setDefaultRenderer(String.class, new CellRenderer());
        int width = tblPenaltyCodes.getFontMetrics(tblPenaltyCodes.getFont()).stringWidth("Code");
        tblPenaltyCodes.getColumnModel().getColumn(0).setMaxWidth(width + 10);
        spPenaltyCodes = new javax.swing.JScrollPane(tblPenaltyCodes);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(spPenaltyCodes, BorderLayout.CENTER);
        setLocation(parent.getX() + parent.getWidth()+1, parent.getY());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setTitle("Penalty Codes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private static class PenaltyCodesTableModel extends AbstractTableModel {

        private static final String[] columnNames = {"Code", "Penalty"};
        
        private String[][] penaltyCodes;
        
        public PenaltyCodesTableModel() {
            penaltyCodes = new String[][]{
                {"B", "Back Block"},
                {"A", "High Block"},
                {"L", "Low Block"},
                {"E", "Elbows"},
                {"F", "Forearms"},
                {"H", "Blocking w/ Head"},
                {"M", "Multi-Player"},
                {"O", "Out Of Bounds Block/Assist"},
                {"C", "Direction of Play"},
                {"", "Clockwise Block/Assist"},
                {"", "Stopped Block/Assist"},
                {"P", "Out of Play"},
                {"", "Destroying the Pack"},
                {"", "Failure to Reform/Return"},
                {"", "Illegal Return"},
                {"X", "Cutting"},
                {"S", "Skating Out of Bounds"},
                {"I", "Illegal Procedure"},
                {"", "Failure to Yield"},
                {"", "Illegal Positioning"},
                {"", "Penalty Box/Equipment/Uniform/Star Pass/Bench Staff Violation"},
                {"", "Illegal Call-off"},
                {"", "Illegal Reentry"},
                {"", "Too Many Skaters"},
                {"", "Interference"},
                {"", "Stalling"},
                {"N", "Insubordination"},
                {"Z", "Delay of Game"},
                {"G", "Misconduct"},
                {"", "Gross Misconduct"},
                {"T", "Hitting - Juniors only"}};
        }

        @Override
        public int getRowCount() {
            return penaltyCodes.length;
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }
        
        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }
        
        @Override
        public Class getColumnClass(int column) {
            return penaltyCodes[0][column].getClass();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return  false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return penaltyCodes[rowIndex][columnIndex];
        }
    }
    
    private static class CellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if(column == 0) {
                label.setFont(label.getFont().deriveFont(Font.BOLD));
            }
            return label;
        }
    }
}
