/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package derbyPenaltyBoard;

import java.awt.GraphicsDevice;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author nbp184
 */
public class MainFrame extends javax.swing.JFrame {

    private Game game;
    private FullScreenForm fsf;
    private MyFileChooser fc;
    private PenaltyCodesDialog pcd;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        String directory = FullScreenOptionsDialog.load();
        fc = new MyFileChooser("Text file", "txt");
        if(directory != null) {
            fc.setCurrentDirectory(new File(directory));
        }
        game = new Game();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        
        pcd = new PenaltyCodesDialog(this, false);
        miFullScreen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPaneTeam = new javax.swing.JSplitPane();
        mbMain = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miNewGame = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mLeft = new javax.swing.JMenu();
        miLeftNew = new javax.swing.JMenuItem();
        miLeftOpen = new javax.swing.JMenuItem();
        miLeftSave = new javax.swing.JMenuItem();
        mRight = new javax.swing.JMenu();
        miRightNew = new javax.swing.JMenuItem();
        miRightOpen = new javax.swing.JMenuItem();
        miRightSave = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        miTeamSwap = new javax.swing.JMenuItem();
        mView = new javax.swing.JMenu();
        miFullScreen = new javax.swing.JCheckBoxMenuItem();
        miUpdateFullScreen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miFullScreenOptions = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miPenaltyCodes = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Derby Penalty Board");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        splitPaneTeam.setDividerSize(0);
        splitPaneTeam.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                splitPaneTeamComponentResized(evt);
            }
        });

        mFile.setText("File");

        miNewGame.setText("New Game");
        miNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewGameActionPerformed(evt);
            }
        });
        mFile.add(miNewGame);
        mFile.add(jSeparator2);

        mLeft.setText("Left Team");

        miLeftNew.setText("New");
        miLeftNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLeftNewActionPerformed(evt);
            }
        });
        mLeft.add(miLeftNew);

        miLeftOpen.setText("Open");
        miLeftOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLeftOpenActionPerformed(evt);
            }
        });
        mLeft.add(miLeftOpen);

        miLeftSave.setText("Save");
        miLeftSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLeftSaveActionPerformed(evt);
            }
        });
        mLeft.add(miLeftSave);

        mFile.add(mLeft);

        mRight.setText("Right Team");

        miRightNew.setText("New");
        miRightNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRightNewActionPerformed(evt);
            }
        });
        mRight.add(miRightNew);

        miRightOpen.setText("Open");
        miRightOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRightOpenActionPerformed(evt);
            }
        });
        mRight.add(miRightOpen);

        miRightSave.setText("Save");
        miRightSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRightSaveActionPerformed(evt);
            }
        });
        mRight.add(miRightSave);

        mFile.add(mRight);

        mbMain.add(mFile);

        mEdit.setText("Edit");

        miTeamSwap.setText("Swap Teams");
        miTeamSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTeamSwapActionPerformed(evt);
            }
        });
        mEdit.add(miTeamSwap);

        mbMain.add(mEdit);

        mView.setText("View");

        miFullScreen.setText("Full Screen");
        miFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFullScreenActionPerformed(evt);
            }
        });
        mView.add(miFullScreen);

        miUpdateFullScreen.setText("Update Full Screen");
        miUpdateFullScreen.setEnabled(false);
        miUpdateFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUpdateFullScreenActionPerformed(evt);
            }
        });
        mView.add(miUpdateFullScreen);
        mView.add(jSeparator1);

        miFullScreenOptions.setText("Full Screen Options");
        miFullScreenOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFullScreenOptionsActionPerformed(evt);
            }
        });
        mView.add(miFullScreenOptions);
        mView.add(jSeparator3);

        miPenaltyCodes.setText("Penalty Codes");
        miPenaltyCodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPenaltyCodesActionPerformed(evt);
            }
        });
        mView.add(miPenaltyCodes);

        mbMain.add(mView);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPaneTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPaneTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void splitPaneTeamComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_splitPaneTeamComponentResized
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_splitPaneTeamComponentResized

    private void miNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewGameActionPerformed
        game = new Game();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        splitPaneTeam.setDividerLocation(0.5);
        if(fsf != null && fsf.isDisplayable()) {
            fsf.resetBoth(game);
        }
    }//GEN-LAST:event_miNewGameActionPerformed

    private void miTeamSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTeamSwapActionPerformed
        game.teamSwap();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_miTeamSwapActionPerformed

    private void miFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFullScreenActionPerformed
        if(miFullScreen.isSelected()) {
            TeamPanel leftPanel = (TeamPanel)splitPaneTeam.getLeftComponent();
            leftPanel.stopEditing();
            TeamPanel rightPanel = (TeamPanel)splitPaneTeam.getRightComponent();
            rightPanel.stopEditing();
            if(FullScreenOptionsDialog.isOnSingleDevice()) {
                GraphicsDevice screenDevice = getGraphicsConfiguration().getDevice();
                if(screenDevice.isFullScreenSupported()) {
                    miUpdateFullScreen.setEnabled(true);
                    fsf = new FullScreenForm(game, this);
                    fsf.setVisible(true);
                    screenDevice.setFullScreenWindow(fsf);
                } else {
                    JOptionPane.showMessageDialog(this, "Full screen not availible.", "Warning", JOptionPane.WARNING_MESSAGE);
                    miFullScreen.setSelected(false);
                }
            } else {
                miUpdateFullScreen.setEnabled(true);
                GraphicsDevice screenDevice = FullScreenOptionsDialog.getScreenDevice();
                Rectangle bounds = screenDevice.getDefaultConfiguration().getBounds();
                fsf = new FullScreenForm(game, this);
                leftPanel.addTeamUpdateListener(new TeamUpdateEvent.TeamUpdateListener() {
                    @Override
                    public void onTeamUpdate(TeamUpdateEvent evt) {
                        fsf.leftTeamUpdate(evt);
                    }
                });
                rightPanel.addTeamUpdateListener(new TeamUpdateEvent.TeamUpdateListener() {
                    @Override
                    public void onTeamUpdate(TeamUpdateEvent evt) {
                        fsf.rightTeamUpdate(evt);
                    }
                });
                fsf.setVisible(true);
                fsf.setLocation(bounds.getLocation());
                fsf.setExtendedState(fsf.getExtendedState() | MAXIMIZED_BOTH);
            }
        } else {
            fsf.dispose();
            miUpdateFullScreen.setEnabled(false);
        }
    }//GEN-LAST:event_miFullScreenActionPerformed

    private void miFullScreenOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFullScreenOptionsActionPerformed
        if(fsf != null && fsf.isDisplayable()) {
            FullScreenOptionsDialog.showDialog(this, fsf);
        } else {
            FullScreenOptionsDialog.showDialog(this);
        }
    }//GEN-LAST:event_miFullScreenOptionsActionPerformed

    private void miUpdateFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUpdateFullScreenActionPerformed
        ((TeamPanel)splitPaneTeam.getLeftComponent()).stopEditing();
        ((TeamPanel)splitPaneTeam.getRightComponent()).stopEditing();
        fsf.updateTables();
    }//GEN-LAST:event_miUpdateFullScreenActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        FullScreenOptionsDialog.save(fc.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_formWindowClosing

    private void miLeftOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLeftOpenActionPerformed
        fc.setSelectedFile(null);
        int result = fc.showOpenDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                game.leftTeam = Team.load(fc.getSelectedFile());
                splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
                splitPaneTeam.setDividerLocation(0.5);
                if(fsf != null && fsf.isDisplayable()) {
                    fsf.resetLeft(game.leftTeam);
                }
            } catch (IOException | NumberFormatException ex) {
                String[] options = new String[]{"Show Details", "OK"};
                result = JOptionPane.showOptionDialog(this, fc.getSelectedFile().getName() +"\nError Opening.", "Open", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                if(result == JOptionPane.YES_OPTION) {
                    StringWriter sw = new StringWriter();
                    ex.printStackTrace(new PrintWriter(sw));
                    JOptionPane.showMessageDialog(this, sw.toString(), "Open - Details", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_miLeftOpenActionPerformed

    private void miLeftNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLeftNewActionPerformed
        game.leftTeam = new Team(false);
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_miLeftNewActionPerformed

    private void miLeftSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLeftSaveActionPerformed
        int result = fc.showSaveDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                Team.save(game.leftTeam, fc.getSelectedFile());
            } catch (IOException ex) {
                String[] options = new String[]{"Show Details", "OK"};
                result = JOptionPane.showOptionDialog(this, fc.getSelectedFile().getName() +"\nError Saving.", "Save", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                if(result == JOptionPane.YES_OPTION) {
                    StringWriter sw = new StringWriter();
                    ex.printStackTrace(new PrintWriter(sw));
                    JOptionPane.showMessageDialog(this, sw.toString(), "Save - Details", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_miLeftSaveActionPerformed

    private void miRightNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRightNewActionPerformed
        game.rightTeam = new Team(false);
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_miRightNewActionPerformed

    private void miRightOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRightOpenActionPerformed
        int result = fc.showOpenDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                game.rightTeam = Team.load(fc.getSelectedFile());
                splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
                splitPaneTeam.setDividerLocation(0.5);
                if(fsf != null && fsf.isDisplayable()) {
                    fsf.resetRight(game.rightTeam);
                }
            } catch (IOException | NumberFormatException ex) {
                String[] options = new String[]{"Show Details", "OK"};
                result = JOptionPane.showOptionDialog(this, fc.getSelectedFile().getName() +"\nError Opening.", "Open", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                if(result == JOptionPane.YES_OPTION) {
                    StringWriter sw = new StringWriter();
                    ex.printStackTrace(new PrintWriter(sw));
                    JOptionPane.showMessageDialog(this, sw.toString(), "Open - Details", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_miRightOpenActionPerformed

    private void miRightSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRightSaveActionPerformed
        int result = fc.showSaveDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                Team.save(game.rightTeam, fc.getSelectedFile());
            } catch (IOException ex) {
                String[] options = new String[]{"Show Details", "OK"};
                result = JOptionPane.showOptionDialog(this, fc.getSelectedFile().getName() +"\nError Saving.", "Save", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                if(result == JOptionPane.YES_OPTION) {
                    StringWriter sw = new StringWriter();
                    ex.printStackTrace(new PrintWriter(sw));
                    JOptionPane.showMessageDialog(this, sw.toString(), "Save - Details", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_miRightSaveActionPerformed

    private void miPenaltyCodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPenaltyCodesActionPerformed
        pcd.setVisible(miPenaltyCodes.isSelected());
    }//GEN-LAST:event_miPenaltyCodesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenu mLeft;
    private javax.swing.JMenu mRight;
    private javax.swing.JMenu mView;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JCheckBoxMenuItem miFullScreen;
    private javax.swing.JMenuItem miFullScreenOptions;
    private javax.swing.JMenuItem miLeftNew;
    private javax.swing.JMenuItem miLeftOpen;
    private javax.swing.JMenuItem miLeftSave;
    private javax.swing.JMenuItem miNewGame;
    private javax.swing.JCheckBoxMenuItem miPenaltyCodes;
    private javax.swing.JMenuItem miRightNew;
    private javax.swing.JMenuItem miRightOpen;
    private javax.swing.JMenuItem miRightSave;
    private javax.swing.JMenuItem miTeamSwap;
    private javax.swing.JMenuItem miUpdateFullScreen;
    private javax.swing.JSplitPane splitPaneTeam;
    // End of variables declaration//GEN-END:variables

    public void fullScreenWindowClosing(FullScreenForm fsf) {
        fsf.dispose();
        miFullScreen.setSelected(false);
        miUpdateFullScreen.setEnabled(false);
    }
    
}
