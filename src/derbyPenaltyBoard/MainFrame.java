/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package derbyPenaltyBoard;

import java.awt.GraphicsDevice;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author nbp184
 */
public class MainFrame extends javax.swing.JFrame {

    private Game game;
    private FullScreenForm fsf;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        FullScreenOptionsDialog.load();
        game = new Game();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        
         getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
            KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0), "FullScreen"); //$NON-NLS-1$
        getRootPane().getActionMap().put("FullScreen", new AbstractAction(){ //$NON-NLS-1$
            @Override
            public void actionPerformed(ActionEvent e)
            {
                enterFullScreenFromKey();
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPaneTeam = new javax.swing.JSplitPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNewGame = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miTeamSwap = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        miFullScreen = new javax.swing.JCheckBoxMenuItem();
        miUpdateFullScreen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miFullScreenOptions = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Derby Penalty Board");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        splitPaneTeam.setDividerLocation(-1);
        splitPaneTeam.setDividerSize(0);
        splitPaneTeam.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                splitPaneTeamComponentResized(evt);
            }
        });

        jMenu1.setText("File");

        miNewGame.setText("New Game");
        miNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewGameActionPerformed(evt);
            }
        });
        jMenu1.add(miNewGame);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        miTeamSwap.setText("Swap Teams");
        miTeamSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miTeamSwapActionPerformed(evt);
            }
        });
        jMenu2.add(miTeamSwap);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        miFullScreen.setText("Full Screen");
        miFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFullScreenActionPerformed(evt);
            }
        });
        jMenu3.add(miFullScreen);

        miUpdateFullScreen.setText("Update Full Screen");
        miUpdateFullScreen.setEnabled(false);
        miUpdateFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUpdateFullScreenActionPerformed(evt);
            }
        });
        jMenu3.add(miUpdateFullScreen);
        jMenu3.add(jSeparator1);

        miFullScreenOptions.setText("Full Screen Options");
        miFullScreenOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFullScreenOptionsActionPerformed(evt);
            }
        });
        jMenu3.add(miFullScreenOptions);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPaneTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPaneTeam, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void splitPaneTeamComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_splitPaneTeamComponentResized
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_splitPaneTeamComponentResized

    private void miNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewGameActionPerformed
        game = new Game();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_miNewGameActionPerformed

    private void miTeamSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miTeamSwapActionPerformed
        game.teamSwap();
        splitPaneTeam.setLeftComponent(new TeamPanel(game.leftTeam));
        splitPaneTeam.setRightComponent(new TeamPanel(game.rightTeam));
        splitPaneTeam.setDividerLocation(0.5);
    }//GEN-LAST:event_miTeamSwapActionPerformed

    private void miFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFullScreenActionPerformed
        if(miFullScreen.isSelected()) {
            ((TeamPanel)splitPaneTeam.getLeftComponent()).stopEditing();
            ((TeamPanel)splitPaneTeam.getRightComponent()).stopEditing();
            GraphicsDevice defaultScreenDevice = FullScreenOptionsDialog.getScreenDevice();
            if(defaultScreenDevice.isFullScreenSupported()) {
                if(FullScreenOptionsDialog.isShowingExitPopup()) {
                    JOptionPane.showMessageDialog(this, "Entering full screen mode. Press the ESCAPE key to exit.");
                }
                fsf = new FullScreenForm(game, this);
                fsf.setVisible(true);
                defaultScreenDevice.setFullScreenWindow(fsf);
                miUpdateFullScreen.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Full screen not availible.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            fsf.dispose();
            miUpdateFullScreen.setEnabled(false);
        }
    }//GEN-LAST:event_miFullScreenActionPerformed

    private void miFullScreenOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFullScreenOptionsActionPerformed
        FullScreenOptionsDialog.showDialog(this);
    }//GEN-LAST:event_miFullScreenOptionsActionPerformed

    private void miUpdateFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUpdateFullScreenActionPerformed
        ((TeamPanel)splitPaneTeam.getLeftComponent()).stopEditing();
        ((TeamPanel)splitPaneTeam.getRightComponent()).stopEditing();
        fsf.updateTables();
    }//GEN-LAST:event_miUpdateFullScreenActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        FullScreenOptionsDialog.save();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JCheckBoxMenuItem miFullScreen;
    private javax.swing.JMenuItem miFullScreenOptions;
    private javax.swing.JMenuItem miNewGame;
    private javax.swing.JMenuItem miTeamSwap;
    private javax.swing.JMenuItem miUpdateFullScreen;
    private javax.swing.JSplitPane splitPaneTeam;
    // End of variables declaration//GEN-END:variables

    public void fullScreenWindowClosing(FullScreenForm fsf) {
        fsf.dispose();
        miFullScreen.setSelected(false);
        miUpdateFullScreen.setEnabled(false);
    }
    
    private void enterFullScreenFromKey() {
        ((TeamPanel)splitPaneTeam.getLeftComponent()).stopEditing();
        ((TeamPanel)splitPaneTeam.getRightComponent()).stopEditing();
        GraphicsDevice defaultScreenDevice = FullScreenOptionsDialog.getScreenDevice();
        if(defaultScreenDevice.isFullScreenSupported()) {
            if(FullScreenOptionsDialog.isShowingExitPopup()) {
                JOptionPane.showMessageDialog(this, "Entering full screen mode. Press the ESCAPE key to exit.");
            }
            fsf = new FullScreenForm(game, this);
            fsf.setVisible(true);
            defaultScreenDevice.setFullScreenWindow(fsf);
            miUpdateFullScreen.setEnabled(true);
            miFullScreen.setSelected(true);
        } else {
            JOptionPane.showMessageDialog(this, "Full screen not availible.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    
}
